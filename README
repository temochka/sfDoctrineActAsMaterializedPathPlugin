# sfDoctrineMaterializedPathPlugin #

## Introduction ##
This behavior allows you to store Materialized Path's trees in your database

## Features ##
 * fully implemented Doctrine_Node_Interface and Doctrine_Tree_Interface interfaces
 * handling multiple trees in one table
 * automatic updation of node paths on changes
 * horizontal ordering support via sortOrder and sortBy options
 * "dead nodes" protection with native database constraints
 * unit-tests for package

## Philosophy ##

 * Classical Materialized Path extended by "level" and "parent_id" fields to improve perfomance
 * Use only DQL. No raw SQL. (It causes light overhead by multiple save method calls)
 * Only new nodes can be inserted in the tree
 * Only existing tree nodes can be moved in tree

## Known bugs ##
 * Dynamic setting Parent and Children by Doctrine relation is not currently supported. Use Doctrine_Node_Interface's methods instead. 

## Get it installed ##

 * go to your project's root
 * Install the plugin (via a Git clone):

    $ git clone git://github.com/temochka/sfDoctrineMaterializedPathPlugin.git plugins/sfDoctrineMaterializedPathPlugin

 * Or install the plugin (via package from [github](http://github.com/temochka "Github"))

 * Activate the plugin in the config/ProjectConfiguration.class.php

    class ProjectConfiguration extends sfProjectConfiguration
    {
      public function setup()
      {
        $this->enablePlugins('sfDoctrinePlugin', 'sfDoctrineMaterializedPathPlugin');
      }
    }

 * edit config/doctrine/schema.yml and add the Materialized path behavior to the model you want to be taggable.
 
    Post:
      actAs:  { Timestampable: ~ , MaterializedPath: ~ }
 
 * rebuild the model: 
 
    ./symfony doctrine:build --all
 
 * clear cache:
 
    ./symfony cc

## Usage ##

Usage is similar to NestedSet trees. Interfaces and behaviour's options should be almost compatible.

Example of model with multiple roots and horizontal ordering by "name" field:

    DbFile:
      actAs:
        MaterializedPath:
          hasManyRoots: true
          sortBy: name
      columns:
        name: { type: string(63), notnull: true }

Sort order can be defined by using sortOrder option (ASC, DESC):

    DbFile:
      actAs:
        MaterializedPath:
          hasManyRoots: true
          sortBy: name
          sortOrder: DESC
      columns:
        name: { type: string(63), notnull: true }

You can set up a custom separator for MaterializedPath "path" string by using "pathSeparator" option:

    Node:
      actAs:
        MaterializedPath:
          pathSeparator: '@'
      # ...

Other examples will appear soon in [project wiki](https://github.com/temochka/sfDoctrineMaterializedPathPlugin/wiki).